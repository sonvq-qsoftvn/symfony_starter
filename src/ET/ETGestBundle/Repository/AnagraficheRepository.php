<?php

namespace ET\ETGestBundle\Repository;

/**
 * AnagraficheRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnagraficheRepository extends \Doctrine\ORM\EntityRepository
{
    
    public function searchClientIdByName($value = '') {
        if (empty($value)) {
            return null;
        }
        
        $queryGetClientId = $this->getEntityManager()        
            ->createQueryBuilder('a')
            ->select('a.idAnagrafica')
            ->from('ETGestBundle:Anagrafiche','a')
            ->where("a.nome LIKE :nome")
            ->orWhere("a.cognome LIKE :cognome")
            ->orWhere("CONCAT(a.cognome, ' ', a.nome) LIKE :fullname")
            ->setParameter('nome', '%'.$value.'%')
            ->setParameter('cognome', '%'.$value.'%')
            ->setParameter('fullname', '%'.$value.'%')
            ->getQuery();     
        
        return $queryGetClientId->getResult();
    }
    
    public function getClientById($arrayClientId = array()) {
        if (count($arrayClientId) <= 0) {
            return null;
        }
        
        $queryGetClient = $this->getEntityManager()        
            ->createQueryBuilder('a')
            ->select('a.idAnagrafica, a.cognome, a.nome, a.ragionesociale')
            ->from('ETGestBundle:Anagrafiche','a')
            ->where("a.idAnagrafica IN (:placeholder)")->setParameter('placeholder', $arrayClientId)->getQuery();
        
        return $queryGetClient->getResult(); 
    }
    
	/**
	 * @param array $filters
     * @return Array
     */
	public function findRegisteredClientsBy($filters = array(), $offset = null, $limit = null)
	{
		if(empty($filters)) return null;

		$qb = $this->getEntityManager()->createQueryBuilder('ana');
		$qb->select('DISTINCT ana.cognome, ana.nome, ana.ragionesociale, ana.idAnagrafica, ana.email, ana.codpromotore, ana.codpromotoreproprietario, ana.temporaneo');
		$qb->addSelect('COUNT(DISTINCT vg.idViaggio) AS numViaggi');
		$qb->addSelect('SUM(CASE WHEN vg.status=6 OR vg.status=8 THEN 1 ELSE 0 END) AS preventivi');
		$qb->addSelect('SUM(CASE WHEN vg.status=7 THEN 1 ELSE 0 END) AS cancellati');

		if(isset($filters['email'])) {
			$qb->addSelect('anacont.contatto');
		}

		$qb->from('ETGestBundle:Anagrafiche','ana');

		$condition = '';
		$conparationOperator = 'LIKE';
		$parameters = array();
		$index = 0;
		foreach($filters as $key => $val) {
			$index++;
			if(is_numeric($val)) {
				$conparationOperator = '=';
			} elseif($key == 'tipologia') {
				$conparationOperator = '!=';
			} else {
				$conparationOperator = 'LIKE';
			}

			if($key == 'idViaggio' or $key == 'tipologia')
				$table = 'vg';
			else
				$table = 'ana';

			$condition .= $table.'.'.$key.' '.$conparationOperator.' :'.$key;
			if($index<count($filters)) {
				if($key == 'email' or $key == 'telcasa' or $key == 'cell' or $key == 'telluff')
					$condition .= ' OR ';
				else 
					$condition .= ' AND ';
			}
			$parameters[$key] = $val;
		}

		$qb->leftJoin('ETGestBundle:Viaggi', 'vg', \Doctrine\ORM\Query\Expr\Join::WITH, 'ana.idAnagrafica = vg.idAnagrafica');

		if(isset($filters['email'])) {
			$qb->leftJoin('ETGestBundle:AnagraficheContatti', 'anacont', \Doctrine\ORM\Query\Expr\Join::WITH, 'ana.idAnagrafica = anacont.idAnagrafica');
		}

		$qb->where($condition);
		$qb->setParameters($parameters);

		if($offset !== null) 
			$qb->setFirstResult($offset);

		if($limit !== null) 
			$qb->setMaxResults($limit);

		$qb->groupBy('ana.idAnagrafica');
		$qb->orderBy('ana.cognome');

		return $qb->getQuery()->getResult();
	}

	public function countTotalClient($filters = array())
	{
		$qb = $this->getEntityManager()->createQueryBuilder('ana');
		$qb->select('COUNT(DISTINCT ana.cognome)');
		$qb->from('ETGestBundle:Anagrafiche', 'ana');

		if(!empty($filters)) {
			$condition = '';
			$conparationOperator = 'LIKE';
			$parameters = array();
			$index = 0;

			foreach($filters as $key => $val) {
				$index++;
				if(is_numeric($val)) {
					$conparationOperator = '=';
				} elseif($key == 'tipologia') {
					$conparationOperator = '!=';
				} else {
					$conparationOperator = 'LIKE';
				}

				if($key == 'idViaggio' or $key == 'tipologia')
					$table = 'vg';
				else
					$table = 'ana';

				$condition .= $table.'.'.$key.' '.$conparationOperator.' :'.$key;
				if($index<count($filters)) {
					if($key == 'email' or $key == 'telcasa' or $key == 'cell' or $key == 'telluff')
						$condition .= ' OR ';
					else 
						$condition .= ' AND ';
				}
				$parameters[$key] = $val;
			}

			$qb->leftJoin('ETGestBundle:Viaggi', 'vg', \Doctrine\ORM\Query\Expr\Join::WITH, 'ana.idAnagrafica = vg.idAnagrafica');

			$qb->where($condition);
			$qb->setParameters($parameters);
		}

		return $qb->getQuery()->getSingleScalarResult();
	}

	/**
	 * @param string $name
     * @return Array
     */
	public function findRegisteredClientsByLastName($name)
	{
		$name = $name.'%';

		$qb = $this->getEntityManager()->createQueryBuilder('ana');
		$qb->select('DISTINCT ana.idAnagrafica, ana.cognome, ana.nome, ana.codpromotore');
		$qb->from('ETGestBundle:Anagrafiche','ana');
		$qb->leftJoin('ETGestBundle:Viaggi', 'vg', \Doctrine\ORM\Query\Expr\Join::WITH, 'ana.idAnagrafica = vg.idAnagrafica');
		$qb->where('ana.cognome LIKE :name');
		$qb->andWhere('vg.status IN (:status)');
		$qb->andWhere('vg.tipologia != :typology');
		$qb->setParameters(array('name'=>$name, 'status'=>array(0,1,3,5), 'typology'=>'Importazione Lotus'));
		$qb->setMaxResults(50);

		return $qb->getQuery()->getResult();
	}

	/**
	 * @param array $filters
     * @return Array
     */
	public function findClientNameByRegistryId($id, $offset = null, $limit = null)
	{
		$sql = "SELECT DISTINCT ana.cognome, ana.nome
				FROM `anagrafiche` AS ana
				INNER JOIN `vacanzev_agenti`.`users` u ON (ana.codPromotore = u.id)
				LEFT JOIN `viaggi` vg ON (ana.id_anagrafica = vg.id_anagrafica AND vg.tipologia != 'Importazione Lotus')
				WHERE ana.id_anagrafica = '{$id}'";

		if($offset !== null) 
			$sql .= " OFFSET {$offset}";

		if($limit !== null) 
			$sql .= " LIMIT {$limit}";

		$sql .= " ORDER BY ana.cognome";

		$stmt  = $this->getEntityManager()->getConnection()->prepare($sql);
		$stmt->execute();
		return $stmt ->fetchAll();
	}

	public function findClientsByPaymentAmount($amount)
	{
		$qb = $this->getEntityManager()->createQueryBuilder('ana');
		$qb->select('DISTINCT v.idViaggio, ana.idAnagrafica, ana.cognome, ana.nome, ana.codpromotore');
		$qb->from('ETGestBundle:Anagrafiche','ana');
		$qb->join('ETGestBundle:Viaggi', 'v', \Doctrine\ORM\Query\Expr\Join::WITH, 'ana.idAnagrafica = v.idAnagrafica');
		$qb->leftJoin('ETGestBundle:Pagamenti', 'p', \Doctrine\ORM\Query\Expr\Join::WITH, 'p.idViaggio = v.idViaggio');
		$qb->where('p.importo = :amount');
		$qb->andWhere('v.status IN (:status)');
		$qb->andWhere('v.tipologia != :typology');
		$qb->setParameters(array('amount'=>(int)$amount, 'status'=>array(0,1,3,5), 'typology'=>'Importazione Lotus'));
		$qb->orderBy('ana.cognome');
		$qb->setMaxResults(50);

		return $qb->getQuery()->getResult();
	}
}
