<?php

namespace ET\ETGestBundle\Repository;

/**
 * IncentivePercRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IncentivePercRepository extends \Doctrine\ORM\EntityRepository
{
    public function getDetailVP($date = '', $userRepository = null) {

        $date = str_replace('-', '', $date);
                
        $qb = $this->getEntityManager()->createQueryBuilder('per');
        
        $qb->select("per.codprompart, per.codpromdest, per.perc AS perc_pagata,  per.percorso");
//        $qb->addselect("FORMAT(((per.perc * vp.fatturato)/100), 2) AS importo");
        $qb->addselect("(per.perc * vp.fatturato)/100 AS importo");
        $qb->addselect("vp.punti, vp.fatturato, vp.moduli, vp.incentiveLocation");
        $qb->addselect("users.tipo, users.codpromotore");
        $qb->addselect("conf.perc AS perc_ragg");
        
		$qb->from('ETGestBundle:IncentivePerc', 'per');
		$qb->leftJoin('ETGestBundle:IncentiveVp', 'vp', \Doctrine\ORM\Query\Expr\Join::WITH, 'per.data = :date AND vp.data = :date AND per.codprompart = vp.codpromotore AND per.data = vp.data');
        $qb->leftJoin('ETGestBundle:IncentiveUsers', 'users', \Doctrine\ORM\Query\Expr\Join::WITH, 'vp.codpromotore=users.codpromotore');
        $qb->leftJoin('ETGestBundle:IncentivePerc', 'conf', \Doctrine\ORM\Query\Expr\Join::WITH, 'per.codprompart = conf.codprompart AND per.codprompart = conf.codpromdest AND conf.data = :date');

		$qb->andWhere('vp.incentiveLocation = :agenzia');       
        
		$qb->setParameters(array(
                'date' => $date, 
                'agenzia' => 'ETMalta'
            )
        );

		$qb->addOrderBy('vp.incentiveLocation', 'DESC');
		$qb->addOrderBy('per.percorso');

        $result = $qb->getQuery()->getResult();
        $arrayCodPromoter = array();
        
        if (count($result) > 0) {
            foreach ($result as $key => &$arrayIncentive) {
                $arrayIncentive['importo'] = number_format((float)$arrayIncentive['importo'], 2, '.', '');
                if (!in_array($arrayIncentive['codpromotore'], $arrayCodPromoter)) {                    
                    $arrayCodPromoter[] = $arrayIncentive['codpromotore'];
                }                
            }
            
            $userArray = array();
            if (count($arrayCodPromoter) > 0) {
                $userArray = $userRepository->getEntityManager()
                    ->createQueryBuilder('u')
                    ->select("u.id as codpromotore, u.multiagenziaId as multiagenzia_id, u.ferie AS stato")
                    ->from('ETUserBundle:Users','u')
                    ->where("u.id IN (:placeholder)")
                    ->setParameter('placeholder', $arrayCodPromoter)
                    ->getQuery()->getResult();    
            }
            
            $userArrayTmp = array();
            foreach ($userArray as $singleUser) {
                $userArrayTmp[$singleUser['codpromotore']] = $singleUser;
            }
                       
            $arrayCodPromoterZero = array(
                'codpromotore' => 0,
                'multiagenzia_id' => 0,
                'stato' => 'disattivo'
            );
            $userArray[] = $arrayCodPromoterZero;
            
            foreach ($result as &$singleResult) {
                $singleResult['multiagenzia_id'] = $userArrayTmp[$singleResult['codpromotore']]['multiagenzia_id'];
                $singleResult['stato'] = $userArrayTmp[$singleResult['codpromotore']]['stato'];
                unset($singleResult['codpromotore']);
            }
            
            return $result;
        }
        
        return null;                
    }
}
