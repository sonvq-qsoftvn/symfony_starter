<?php

namespace ET\ETGestBundle\Repository;

use ET\ETGestBundle\Entity\Pagamenti;
use \DateTime;

/**
 * PagamentiRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PagamentiRepository extends \Doctrine\ORM\EntityRepository
{
	public function findPaymentsByTravelId($id)
	{
		if(!$id) return;

		$qb = $this->getEntityManager()->createQueryBuilder('p');
		$qb->select('p.idpag, p.idViaggio, p.dataeffettiva, p.importo, p.metodopag, p.descrizione, p.rimborso');
		$qb->from('ETGestBundle:Pagamenti', 'p');
		$qb->where('p.idViaggio = :id');
		$qb->setParameter('id', (int)$id);

		return $qb->getQuery()->getResult();
	}

	public function deletePaymentById($id)
	{
		if(!$id) return;

		$sql = "DELETE FROM `pagamenti`  WHERE `idPag` = {$id} LIMIT 1";
        $stmt  = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();
	}

	public function addNewPayment($data = array())
	{
		//if(!$data or empty($data)) return;

		$em = $this->getEntityManager();
		$payment = new Pagamenti();
		$payment->setIdViaggio($data['idViaggio']);
		$payment->setDatapag(new DateTime("now"));
		$payment->setDataeffettiva($data['dataeffettiva']);
		$payment->setImporto($data['importo']);
		$payment->setPagato(1);
		$payment->setMetodopag($data['metodopag']);
		$payment->setDescrizione($data['descrizione']);
		$payment->setCodpromotorecreazione($data['codpromotorecreazione']);
		$payment->setTipo('etgest');
		$payment->setRimborso($data['rimborso']);
		$payment->setDatamodifica(new DateTime('0000-00-00 00:00:00'));
        $payment->setSiapRegDate(new DateTime('0000-00-00 00:00:00'));
        $payment->setAvesRisposta('');
        $payment->setSiapRegNumber(0);

		$em->persist($payment);
		$em->flush();

		return $payment->getIdpag();
	}

	public function findAllPaymentsFromTo($filter = array())
	{
		$qb = $this->getEntityManager()->createQueryBuilder('p');
		$qb->select('p');
		$qb->from('ETGestBundle:Pagamenti', 'p');
		$qb->where("DATE_DIFF(p.datapag,'".$filter['datefrom']."') >=0");
		
		if(isset($filter['dateto'])) {
			$qb->andWhere("DATE_DIFF(p.datapag, '".$filter['dateto']."') <=0");
		}

		$qb->orderBy('p.datapag', 'DESC');
		return $qb->getQuery()->getArrayResult();
	}

	public function findPaymentDetailsEtgest($offset = null, $limit = null)
	{
		$sql = "SELECT * FROM `pagamenti` as p, `viaggi` as v, `pagamenti_dettagli_etgest` as d WHERE p.`idPag`=d.`idPag` AND d.`idRif`=v.`id_viaggio` AND p.`pagato` IN(1,2) ORDER BY p.`metodoPag`, p.`id_viaggio`";

		if($limit) $sql .= " LIMIT {$limit} ";
		if($offset) $sql .= " OFFSET {$offset} ";

		$stmt  = $this->getEntityManager()->getConnection()->prepare($sql);
		$stmt->execute();
		return $stmt ->fetchAll();
	}

	public function countPaymentDetailsEtgest()
	{
		$sql = "SELECT COUNT(*) AS total FROM `pagamenti` as p, `viaggi` as v, `pagamenti_dettagli_etgest` as d WHERE p.`idPag`=d.`idPag` AND d.`idRif`=v.`id_viaggio` AND p.`pagato` IN(1,2) ORDER BY p.`metodoPag`, p.`id_viaggio`";

		$stmt  = $this->getEntityManager()->getConnection()->prepare($sql);
		$stmt->execute();
		return $stmt ->fetch();
	}
}
